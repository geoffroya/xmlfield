<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>XmlField's behavior explained</title>
        <author email="nicolas.richeton@capgemini.com">Nicolas Richeton</author>
    </properties>

    <body>


        <h1>Behavior</h1>

        <p>XMLField differs from most xml-to-object mapping frameworks because it does not alter or delete data which
            is not part of its model, even with write operations (ie. adding tags, setting values, ordering items). 
        </p>
        <p>Suppose an application has been written to work on the following document as input using a xml-to-object
            framework. This application adds and updates a specific tag : "lastLogin"
        </p>

        <source><![CDATA[
<user>
    <id>sdupond</id>
    <lastName>John</lastName>
    <firstName>Doe</firstName>
</user>
]]></source>

        <p>At some point, we decided to add some tags to the model, without updating the application.</p>

        <source><![CDATA[
<user source=‘leads’>
    <id>sdupond</id>
    <lastName>John</lastName>
    <firstName>Doe</firstName>

    <preferences>
          <rememberMe>true</rememberMe>
    </preferences>
</user>
]]></source>
        <p>Lets see the differences between XmlField and most of the other frameworks : </p>

        <h2>Generic xml-to-object (not XmlField)</h2>
        <p>With most frameworks, xml is read and mapped to an object. The application updates this object then creates a new
            xml file from it. All data from the initial xml document which did not fit into the object are simply lost.
            As a result, you get the following file :
        </p>

        <source><![CDATA[
<user>
    <id>sdupond</id>
    <lastName>John</lastName>
    <firstName>Doe</firstName>
    <lastLogin>2011/10/10</lastLogin>
</user>
]]></source>
        <h2>XmlField</h2>
        <p>XmlField does not type to map every xml attribute to an object. Instead, it uses an annotated interface to create a
            view on the xml file. This means that when calling write methods, you are simply updating the underlying xml
            document. Even when reordering arrays, XmlField keeps track of each object and moves the corresponding tag accordingly.
            As a result, you get the following file :
        </p>
        <source><![CDATA[
<user source=‘leads’>
    <id>sdupond</id>
    <lastName>John</lastName>
    <firstName>Doe</firstName>

    <preferences>
          <rememberMe>true</rememberMe>
    </preferences>
    
     <lastLogin>2011/10/10</lastLogin>
</user>
]]></source>

        <h2>Why does it matter</h2>
        <p>When building an enterprise-grade application, divided into multiple components, applications and servers,
            updating object or document models can be very time consuming because you need to support the new model in
            every application.
        </p>
        <p>With XmlField (and REST services working on xml documents), you can add data to your model without updating
            the whole system in most cases. The only applications which need to be updated are the ones REALLY
            using the
            new data.
        </p>
        <p> XmlField comes with a validation module (also working only on known data) which can help you to implement
            this without loosing document validation.
        </p>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
<![CDATA[  
        var disqus_shortname = 'esigate';

        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
        
      //  ]]>
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
   	
    </body>
</document>
  
  